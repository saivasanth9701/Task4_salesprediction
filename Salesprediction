#importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

     

#reading the dataset
data = pd.read_csv("advertising.csv")
     

#seperating dataset into independent and dependent variables
x=data.iloc[:,:-1].values
y=data.iloc[:,-1].values
     

#checking the correlation between the features
data.corr()
#the correlation betwwen the TV advertisment and sales is high,hence the sales is dominated by TV advertisement
     
TV	Radio	Newspaper	Sales
TV	1.000000	0.054809	0.056648	0.901208
Radio	0.054809	1.000000	0.354104	0.349631
Newspaper	0.056648	0.354104	1.000000	0.157960
Sales	0.901208	0.349631	0.157960	1.000000

#splitting the dataset into training and testing data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
     

#using random foest regressor to build and train the model
from sklearn.ensemble import RandomForestRegressor
regression = RandomForestRegressor(n_estimators=15,random_state=0)
regression.fit(x_train,y_train)
     
RandomForestRegressor(n_estimators=15, random_state=0)
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.

#predict the x_test values
y_pred = regression.predict(x_test)
np.set_printoptions(precision=2)
     

#printing predicted and actual dependent variable values
print(np.concatenate((y_pred.reshape(-1,1),y_test.reshape(-1,1)),1))
     
[[10.91 11.3 ]
 [ 9.99  8.4 ]
 [11.56 12.  ]
 [25.07 25.4 ]
 [16.75 16.7 ]
 [10.47  8.7 ]
 [ 8.52  7.2 ]
 [18.07 18.2 ]
 [ 8.27  9.2 ]
 [17.12 16.6 ]
 [25.11 24.2 ]
 [11.29 10.6 ]
 [15.24 15.5 ]
 [20.2  20.6 ]
 [12.27 11.8 ]
 [12.27 13.2 ]
 [19.99 17.4 ]
 [ 5.68  1.6 ]
 [14.2  14.7 ]
 [17.35 17.  ]
 [25.15 26.2 ]
 [12.04 10.3 ]
 [16.83 16.1 ]
 [12.11 12.9 ]
 [ 9.83  8.1 ]
 [14.47 15.2 ]
 [16.65 17.6 ]
 [22.4  22.6 ]
 [16.37 16.6 ]
 [ 7.93  8.5 ]
 [12.3  12.5 ]
 [23.31 23.7 ]
 [19.76 16.1 ]
 [22.48 21.8 ]
 [ 6.23  5.6 ]
 [ 6.87  6.7 ]
 [10.46  9.7 ]
 [18.03 17.9 ]
 [12.72 13.6 ]
 [ 7.13  7.2 ]]

#using metrics for calculating regression score
from sklearn.metrics import r2_score
r2_score(y_test,y_pred)
     
0.9540812022786731


     

#calculation mean_square error, lower the mean_square error better the model
from sklearn.metrics import mean_squared_error
errors = list()
for i in range(len(y_test)):
 err = (y_test[i] - y_pred[i])**2
 errors.append(err)
 print('>%.1f, %.1f = %.3f' % (y_test[i], y_pred[i], err))
     
>11.3, 10.9 = 0.150
>8.4, 10.0 = 2.518
>12.0, 11.6 = 0.194
>25.4, 25.1 = 0.111
>16.7, 16.7 = 0.002
>8.7, 10.5 = 3.121
>7.2, 8.5 = 1.742
>18.2, 18.1 = 0.018
>9.2, 8.3 = 0.859
>16.6, 17.1 = 0.270
>24.2, 25.1 = 0.822
>10.6, 11.3 = 0.481
>15.5, 15.2 = 0.068
>20.6, 20.2 = 0.160
>11.8, 12.3 = 0.218
>13.2, 12.3 = 0.871
>17.4, 20.0 = 6.725
>1.6, 5.7 = 16.646
>14.7, 14.2 = 0.250
>17.0, 17.3 = 0.120
>26.2, 25.2 = 1.096
>10.3, 12.0 = 3.028
>16.1, 16.8 = 0.538
>12.9, 12.1 = 0.619
>8.1, 9.8 = 2.981
>15.2, 14.5 = 0.528
>17.6, 16.6 = 0.909
>22.6, 22.4 = 0.040
>16.6, 16.4 = 0.051
>8.5, 7.9 = 0.329
>12.5, 12.3 = 0.040
>23.7, 23.3 = 0.150
>16.1, 19.8 = 13.396
>21.8, 22.5 = 0.462
>5.6, 6.2 = 0.393
>6.7, 6.9 = 0.030
>9.7, 10.5 = 0.578
>17.9, 18.0 = 0.016
>13.6, 12.7 = 0.774
>7.2, 7.1 = 0.005

#good model have root mean square error nearer to zero
from scipy.sparse.linalg._isolve.lsqr import sqrt
from sklearn.metrics import mean_squared_error
errors = list()
for i in range(len(y_test)):
 err = sqrt((y_test[i] - y_pred[i])**2)
 errors.append(err)
 print('>%.1f, %.1f = %.3f' % (y_test[i], y_pred[i], err))
     
>11.3, 10.9 = 0.387
>8.4, 10.0 = 1.587
>12.0, 11.6 = 0.440
>25.4, 25.1 = 0.333
>16.7, 16.7 = 0.047
>8.7, 10.5 = 1.767
>7.2, 8.5 = 1.320
>18.2, 18.1 = 0.133
>9.2, 8.3 = 0.927
>16.6, 17.1 = 0.520
>24.2, 25.1 = 0.907
>10.6, 11.3 = 0.693
>15.5, 15.2 = 0.260
>20.6, 20.2 = 0.400
>11.8, 12.3 = 0.467
>13.2, 12.3 = 0.933
>17.4, 20.0 = 2.593
>1.6, 5.7 = 4.080
>14.7, 14.2 = 0.500
>17.0, 17.3 = 0.347
>26.2, 25.2 = 1.047
>10.3, 12.0 = 1.740
>16.1, 16.8 = 0.733
>12.9, 12.1 = 0.787
>8.1, 9.8 = 1.727
>15.2, 14.5 = 0.727
>17.6, 16.6 = 0.953
>22.6, 22.4 = 0.200
>16.6, 16.4 = 0.227
>8.5, 7.9 = 0.573
>12.5, 12.3 = 0.200
>23.7, 23.3 = 0.387
>16.1, 19.8 = 3.660
>21.8, 22.5 = 0.680
>5.6, 6.2 = 0.627
>6.7, 6.9 = 0.173
>9.7, 10.5 = 0.760
>17.9, 18.0 = 0.127
>13.6, 12.7 = 0.880
>7.2, 7.1 = 0.073

y_pred = regression.predict([[230.1,37.8,69.2]])

     

print(y_pred)
     
[22.06]
